{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_jsx_a11y */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/lib.npmtest_eslint_plugin_jsx_a11y.js":"/* istanbul instrument in package npmtest_eslint_plugin_jsx_a11y */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_jsx_a11y = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_jsx_a11y = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-jsx-a11y && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_jsx_a11y */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_jsx_a11y\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_jsx_a11y.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_jsx_a11y.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_jsx_a11y.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_jsx_a11y.__dirname + '/lib.npmtest_eslint_plugin_jsx_a11y.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/index.js":"'use strict';\n\n/* eslint-disable global-require */\n\nmodule.exports = {\n  rules: {\n    'accessible-emoji': require('./rules/accessible-emoji'),\n    'anchor-has-content': require('./rules/anchor-has-content'),\n    'aria-activedescendant-has-tabindex': require('./rules/aria-activedescendant-has-tabindex'),\n    'aria-props': require('./rules/aria-props'),\n    'aria-proptypes': require('./rules/aria-proptypes'),\n    'aria-role': require('./rules/aria-role'),\n    'aria-unsupported-elements': require('./rules/aria-unsupported-elements'),\n    'click-events-have-key-events': require('./rules/click-events-have-key-events'),\n    'heading-has-content': require('./rules/heading-has-content'),\n    'href-no-hash': require('./rules/href-no-hash'),\n    'html-has-lang': require('./rules/html-has-lang'),\n    'iframe-has-title': require('./rules/iframe-has-title'),\n    'img-has-alt': require('./rules/img-has-alt'),\n    'img-redundant-alt': require('./rules/img-redundant-alt'),\n    'label-has-for': require('./rules/label-has-for'),\n    lang: require('./rules/lang'),\n    'mouse-events-have-key-events': require('./rules/mouse-events-have-key-events'),\n    'no-access-key': require('./rules/no-access-key'),\n    'no-autofocus': require('./rules/no-autofocus'),\n    'no-distracting-elements': require('./rules/no-distracting-elements'),\n    'no-onchange': require('./rules/no-onchange'),\n    'no-redundant-roles': require('./rules/no-redundant-roles'),\n    'no-static-element-interactions': require('./rules/no-static-element-interactions'),\n    'onclick-has-focus': require('./rules/onclick-has-focus'),\n    'onclick-has-role': require('./rules/onclick-has-role'),\n    'role-has-required-aria-props': require('./rules/role-has-required-aria-props'),\n    'role-supports-aria-props': require('./rules/role-supports-aria-props'),\n    scope: require('./rules/scope'),\n    'tabindex-no-positive': require('./rules/tabindex-no-positive')\n  },\n  configs: {\n    recommended: {\n      parserOptions: {\n        ecmaFeatures: {\n          jsx: true\n        }\n      },\n      rules: {\n        'jsx-a11y/accessible-emoji': 'error',\n        'jsx-a11y/anchor-has-content': 'error',\n        'jsx-a11y/aria-activedescendant-has-tabindex': 'error',\n        'jsx-a11y/aria-props': 'error',\n        'jsx-a11y/aria-proptypes': 'error',\n        'jsx-a11y/aria-role': 'error',\n        'jsx-a11y/aria-unsupported-elements': 'error',\n        'jsx-a11y/click-events-have-key-events': 'error',\n        'jsx-a11y/heading-has-content': 'error',\n        'jsx-a11y/href-no-hash': 'error',\n        'jsx-a11y/html-has-lang': 'error',\n        'jsx-a11y/iframe-has-title': 'error',\n        'jsx-a11y/img-has-alt': 'error',\n        'jsx-a11y/img-redundant-alt': 'error',\n        'jsx-a11y/label-has-for': 'error',\n        'jsx-a11y/mouse-events-have-key-events': 'error',\n        'jsx-a11y/no-access-key': 'error',\n        'jsx-a11y/no-autofocus': 'error',\n        'jsx-a11y/no-distracting-elements': 'error',\n        'jsx-a11y/no-onchange': 'error',\n        'jsx-a11y/no-redundant-roles': 'error',\n        'jsx-a11y/no-static-element-interactions': 'warn',\n        'jsx-a11y/onclick-has-focus': 'error',\n        'jsx-a11y/onclick-has-role': 'error',\n        'jsx-a11y/role-has-required-aria-props': 'error',\n        'jsx-a11y/role-supports-aria-props': 'error',\n        'jsx-a11y/scope': 'error',\n        'jsx-a11y/tabindex-no-positive': 'error'\n      }\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/accessible-emoji.js":"'use strict';\n\nvar _emojiRegex = require('emoji-regex');\n\nvar _emojiRegex2 = _interopRequireDefault(_emojiRegex);\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar errorMessage = 'Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.'; /**\n                                                                                                                                                   * @fileoverview Enforce emojis are wrapped in <span> and provide screenreader access.\n                                                                                                                                                   * @author Ethan Cohen\n                                                                                                                                                   */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var literalChildValue = node.parent.children.find(function (child) {\n          return child.type === 'Literal';\n        });\n\n        if (literalChildValue && (0, _emojiRegex2.default)().test(literalChildValue.value)) {\n          var rolePropValue = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'role'));\n          var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n          var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n          var hasLabel = ariaLabelProp !== undefined || arialLabelledByProp !== undefined;\n          var isSpan = (0, _jsxAstUtils.elementType)(node) === 'span';\n\n          if (hasLabel === false || rolePropValue !== 'img' || isSpan === false) {\n            context.report({\n              node: node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/schemas.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateObjSchema = exports.enumArraySchema = exports.arraySchema = undefined;\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * JSON schema to accept an array of unique strings\n */\nvar arraySchema = exports.arraySchema = {\n  type: 'array',\n  items: {\n    type: 'string'\n  },\n  minItems: 1,\n  uniqueItems: true,\n  additionalItems: false\n};\n\n/**\n * JSON schema to accept an array of unique strings from an enumerated list.\n */\nvar enumArraySchema = exports.enumArraySchema = function enumArraySchema() {\n  var enumeratedList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return (0, _objectAssign2.default)({}, arraySchema, {\n    items: {\n      type: 'string',\n      enum: enumeratedList\n    }\n  });\n};\n\n/**\n * Factory function to generate an object schema\n * with specified properties object\n */\nvar generateObjSchema = exports.generateObjSchema = function generateObjSchema() {\n  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    type: 'object',\n    properties: properties\n  };\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/anchor-has-content.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar errorMessage = 'Anchors must have content and the content must be accessible by a screen reader.'; /**\n                                                                                                        * @fileoverview Enforce anchor elements to contain accessible content.\n                                                                                                        * @author Lisa Ring & Niklas Holmberg\n                                                                                                        */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)({ components: _schemas.arraySchema });\n\nvar determineChildType = function determineChildType(child) {\n  switch (child.type) {\n    case 'Literal':\n      return Boolean(child.value);\n    case 'JSXElement':\n      return !(0, _isHiddenFromScreenReader2.default)((0, _jsxAstUtils.elementType)(child.openingElement), child.openingElement.attributes);\n    case 'JSXExpressionContainer':\n      if (child.expression.type === 'Identifier') {\n        return child.expression.name !== 'undefined';\n      }\n      return true;\n    default:\n      return false;\n  }\n};\n\nmodule.exports = {\n  determineChildType: determineChildType,\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        // Only check anchor elements and custom types.\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        }\n        var isAccessible = node.parent.children.some(determineChildType) || (0, _jsxAstUtils.hasAnyProp)(node.attributes, ['dangerouslySetInnerHTML', 'children']);\n\n        if (isAccessible) {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/isHiddenFromScreenReader.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns boolean indicating that the aria-hidden prop\n * is present or the value is true. Will also return true if\n * there is an input with type='hidden'.\n *\n * <div aria-hidden /> is equivalent to the DOM as <div aria-hidden=true />.\n */\nvar isHiddenFromScreenReader = function isHiddenFromScreenReader(type, attributes) {\n  if (type.toUpperCase() === 'INPUT') {\n    var hidden = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(attributes, 'type'));\n\n    if (hidden && hidden.toUpperCase() === 'HIDDEN') {\n      return true;\n    }\n  }\n\n  var ariaHidden = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(attributes, 'aria-hidden'));\n  return ariaHidden === true;\n};\n\nexports.default = isHiddenFromScreenReader;","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-activedescendant-has-tabindex.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _getTabIndex = require('../util/getTabIndex');\n\nvar _getTabIndex2 = _interopRequireDefault(_getTabIndex);\n\nvar _isInteractiveElement = require('../util/isInteractiveElement');\n\nvar _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce elements with aria-activedescendant are tabbable.\n                                                                                                                                                                                                     * @author Jesse Beach <@jessebeach>\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'An element that manages focus with `aria-activedescendant` must be tabbable';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nvar domElements = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n\n\n        if ((0, _jsxAstUtils.getProp)(attributes, 'aria-activedescendant') === undefined) {\n          return;\n        }\n\n        var type = (0, _jsxAstUtils.elementType)(node);\n        // Do not test higher level JSX components, as we do not know what\n        // low-level DOM element this maps to.\n        if (domElements.indexOf(type) === -1) {\n          return;\n        }\n        var tabIndex = (0, _getTabIndex2.default)((0, _jsxAstUtils.getProp)(attributes, 'tabIndex'));\n\n        // If this is an interactive element, tabIndex must be either left\n        // unspecified allowing the inherent tabIndex to obtain or it must be\n        // zero (allowing for positive, even though that is not ideal). It cannot\n        // be given a negative value.\n        if ((0, _isInteractiveElement2.default)(type, attributes) && (tabIndex === undefined || tabIndex >= 0)) {\n          return;\n        }\n\n        if (tabIndex >= 0) {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/getTabIndex.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = getTabIndex;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the tabIndex value.\n */\nfunction getTabIndex(tabIndex) {\n  var literalValue = (0, _jsxAstUtils.getLiteralPropValue)(tabIndex);\n\n  // String and number values.\n  if (['string', 'number'].indexOf(typeof literalValue === 'undefined' ? 'undefined' : _typeof(literalValue)) > -1) {\n    // Empty string will convert to zero, so check for it explicity.\n    if (typeof literalValue === 'string' && literalValue.length === 0) {\n      return undefined;\n    }\n    var value = Number(literalValue);\n    if (Number.isNaN(value)) {\n      return undefined;\n    }\n\n    return Number.isInteger(value) ? value : undefined;\n  }\n\n  // Booleans are not valid values, return undefined.\n  if (literalValue === true || literalValue === false) {\n    return undefined;\n  }\n\n  return (0, _jsxAstUtils.getPropValue)(tabIndex);\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/isInteractiveElement.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interactiveElementsMap = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _getTabIndex = require('./getTabIndex');\n\nvar _getTabIndex2 = _interopRequireDefault(_getTabIndex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// Map of tagNames to functions that return whether that element is interactive or not.\nvar DOMElements = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));\nvar pureInteractiveElements = DOMElements.filter(function (name) {\n  return _ariaQuery.dom.get(name).interactive === true;\n}).reduce(function (accumulator, name) {\n  var interactiveElements = accumulator;\n  interactiveElements[name] = function () {\n    return true;\n  };\n  return interactiveElements;\n}, {});\n\nvar isLink = function isLink(attributes) {\n  var href = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(attributes, 'href'));\n  var tabIndex = (0, _getTabIndex2.default)((0, _jsxAstUtils.getProp)(attributes, 'tabIndex'));\n  return href !== undefined || tabIndex !== undefined;\n};\n\nvar interactiveElementsMap = exports.interactiveElementsMap = _extends({}, pureInteractiveElements, {\n  a: isLink,\n  area: isLink,\n  input: function input(attributes) {\n    var typeAttr = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(attributes, 'type'));\n    return typeAttr ? typeAttr.toUpperCase() !== 'HIDDEN' : true;\n  }\n});\n\n/**\n * Returns boolean indicating whether the given element is\n * interactive on the DOM or not. Usually used when an element\n * has a dynamic handler on it and we need to discern whether or not\n * it's intention is to be interacted with on the DOM.\n */\nvar isInteractiveElement = function isInteractiveElement(tagName, attributes) {\n  // Do not test higher level JSX components, as we do not know what\n  // low-level DOM element this maps to.\n  if (DOMElements.indexOf(tagName) === -1) {\n    return true;\n  }\n\n  if ({}.hasOwnProperty.call(interactiveElementsMap, tagName) === false) {\n    return false;\n  }\n\n  return interactiveElementsMap[tagName](attributes);\n};\n\nexports.default = isInteractiveElement;","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-props.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _getSuggestion = require('../util/getSuggestion');\n\nvar _getSuggestion2 = _interopRequireDefault(_getSuggestion);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce all aria-* properties are valid.\n                                                                                                                                                                                                     * @author Ethan Cohen\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar ariaAttributes = [].concat(_toConsumableArray(_ariaQuery.aria.keys()));\n\nvar errorMessage = function errorMessage(name) {\n  var suggestions = (0, _getSuggestion2.default)(name, ariaAttributes);\n  var message = name + ': This attribute is an invalid ARIA attribute.';\n\n  if (suggestions.length > 0) {\n    return message + ' Did you mean to use ' + suggestions + '?';\n  }\n\n  return message;\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name ? name.toLowerCase() : '';\n\n        // `aria` needs to be prefix of property.\n        if (normalizedName.indexOf('aria-') !== 0) {\n          return;\n        }\n\n        var isValid = ariaAttributes.indexOf(normalizedName) > -1;\n\n        if (isValid === false) {\n          context.report({\n            node: attribute,\n            message: errorMessage(name)\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/getSuggestion.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getSuggestion;\n\nvar _damerauLevenshtein = require('damerau-levenshtein');\n\nvar _damerauLevenshtein2 = _interopRequireDefault(_damerauLevenshtein);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Minimum edit distance to be considered a good suggestion.\nvar THRESHOLD = 2;\n\n/**\n * Returns an array of suggestions given a word and a dictionary and limit of suggestions\n * to return.\n */\nfunction getSuggestion(word) {\n  var dictionary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n\n  var distances = dictionary.reduce(function (suggestions, dictionaryWord) {\n    var distance = (0, _damerauLevenshtein2.default)(word.toUpperCase(), dictionaryWord.toUpperCase());\n    var steps = distance.steps;\n\n    suggestions[dictionaryWord] = steps; // eslint-disable-line\n    return suggestions;\n  }, {});\n\n  return Object.keys(distances).filter(function (suggestion) {\n    return distances[suggestion] <= THRESHOLD;\n  }).sort(function (a, b) {\n    return distances[a] - distances[b];\n  }) // Sort by distance\n  .slice(0, limit);\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-proptypes.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar errorMessage = function errorMessage(name, type, permittedValues) {\n  switch (type) {\n    case 'tristate':\n      return 'The value for ' + name + ' must be a boolean or the string \"mixed\".';\n    case 'token':\n      return 'The value for ' + name + ' must be a single token from the following: ' + permittedValues + '.';\n    case 'tokenlist':\n      return 'The value for ' + name + ' must be a list of one or more tokens from the following: ' + permittedValues + '.';\n    case 'boolean':\n    case 'string':\n    case 'integer':\n    case 'number':\n    default:\n      return 'The value for ' + name + ' must be a ' + type + '.';\n  }\n}; /**\n    * @fileoverview Enforce ARIA state and property values are valid.\n    * @author Ethan Cohen\n    */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar validityCheck = function validityCheck(value, expectedType, permittedValues) {\n  switch (expectedType) {\n    case 'boolean':\n      return typeof value === 'boolean';\n    case 'string':\n      return typeof value === 'string';\n    case 'tristate':\n      return typeof value === 'boolean' || value === 'mixed';\n    case 'integer':\n    case 'number':\n      // Booleans resolve to 0/1 values so hard check that it's not first.\n      return typeof value !== 'boolean' && isNaN(Number(value)) === false;\n    case 'token':\n      return permittedValues.indexOf(typeof value === 'string' ? value.toLowerCase() : value) > -1;\n    case 'tokenlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return permittedValues.indexOf(token.toLowerCase()) > -1;\n      });\n    default:\n      return false;\n  }\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  validityCheck: validityCheck,\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name ? name.toLowerCase() : '';\n\n        // Not a valid aria-* state or property.\n        if (normalizedName.indexOf('aria-') !== 0 || _ariaQuery.aria.get(normalizedName) === undefined) {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute);\n\n        // We only want to check literal prop values, so just pass if it's null.\n        if (value === null) {\n          return;\n        }\n\n        // These are the attributes of the property/state to check against.\n        var attributes = _ariaQuery.aria.get(normalizedName);\n        var permittedType = attributes.type;\n        var allowUndefined = attributes.allowUndefined || false;\n        var permittedValues = attributes.values || [];\n\n        var isValid = validityCheck(value, permittedType, permittedValues) || allowUndefined && value === undefined;\n\n        if (isValid) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage(name, permittedType, permittedValues)\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-role.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce aria role attribute is valid.\n                                                                                                                                                                                                     * @author Ethan Cohen\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Elements with ARIA roles must use a valid, non-abstract ARIA role.';\n\nvar schema = (0, _schemas.generateObjSchema)({\n  ignoreNonDOM: {\n    type: 'boolean',\n    default: false\n  }\n});\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        // Determine if ignoreNonDOM is set to true\n        // If true, then do not run rule.\n        var options = context.options[0] || {};\n        var ignoreNonDOM = !!options.ignoreNonDOM;\n\n        if (ignoreNonDOM) {\n          var type = (0, _jsxAstUtils.elementType)(attribute.parent);\n          if (!_ariaQuery.dom.get(type)) {\n            return;\n          }\n        }\n\n        // Get prop name\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name ? name.toUpperCase() : '';\n\n        if (normalizedName !== 'ROLE') {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute);\n\n        // If value is undefined, then the role attribute will be dropped in the DOM.\n        // If value is null, then getLiteralAttributeValue is telling us that the\n        // value isn't in the form of a literal.\n        if (value === undefined || value === null) {\n          return;\n        }\n\n        var normalizedValues = String(value).toLowerCase().split(' ');\n        var validRoles = [].concat(_toConsumableArray(_ariaQuery.roles.keys())).filter(function (role) {\n          return _ariaQuery.roles.get(role).abstract === false;\n        });\n        var isValid = normalizedValues.every(function (val) {\n          return validRoles.indexOf(val) > -1;\n        });\n\n        if (isValid === true) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-unsupported-elements.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce that elements that do not support ARIA roles,\n                                                                                                                                                                                                     *  states and properties do not have those attributes.\n                                                                                                                                                                                                     * @author Ethan Cohen\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(invalidProp) {\n  return 'This element does not support ARIA roles, states and properties. Try removing the prop \\'' + invalidProp + '\\'.';\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n        var nodeAttrs = _ariaQuery.dom.get(nodeType) || {};\n        var _nodeAttrs$reserved = nodeAttrs.reserved,\n            isReservedNodeType = _nodeAttrs$reserved === undefined ? false : _nodeAttrs$reserved;\n\n        // If it's not reserved, then it can have aria-* roles, states, and properties\n\n        if (isReservedNodeType === false) {\n          return;\n        }\n\n        var invalidAttributes = [].concat(_toConsumableArray(_ariaQuery.aria.keys())).concat('role');\n\n        node.attributes.forEach(function (prop) {\n          if (prop.type === 'JSXSpreadAttribute') {\n            return;\n          }\n\n          var name = (0, _jsxAstUtils.propName)(prop);\n          var normalizedName = name ? name.toLowerCase() : '';\n\n          if (invalidAttributes.indexOf(normalizedName) > -1) {\n            context.report({\n              node: node,\n              message: errorMessage(name)\n            });\n          }\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/click-events-have-key-events.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nvar _isInteractiveElement = require('../util/isInteractiveElement');\n\nvar _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @fileoverview Enforce a clickable non-interactive element has at least 1 keyboard event listener.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Visible, non-interactive elements with click handlers' + ' must have at least one keyboard listener.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var props = node.attributes;\n        if ((0, _jsxAstUtils.getProp)(props, 'onclick') === undefined) {\n          return;\n        }\n\n        var type = (0, _jsxAstUtils.elementType)(node);\n        var requiredProps = ['onkeydown', 'onkeyup', 'onkeypress'];\n\n        if ((0, _isHiddenFromScreenReader2.default)(type, props)) {\n          return;\n        } else if ((0, _isInteractiveElement2.default)(type, props)) {\n          return;\n        } else if ((0, _jsxAstUtils.hasAnyProp)(props, requiredProps)) {\n          return;\n        }\n\n        // Visible, non-interactive elements with click handlers require one keyboard event listener.\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/heading-has-content.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar errorMessage = 'Headings must have content and the content must be accessible by a screen reader.'; /**\n                                                                                                         * @fileoverview Enforce heading (h1, h2, etc) elements contain accessible content.\n                                                                                                         * @author Ethan Cohen\n                                                                                                         */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nvar schema = (0, _schemas.generateObjSchema)({ components: _schemas.arraySchema });\n\nvar determineChildType = function determineChildType(child) {\n  switch (child.type) {\n    case 'Literal':\n      return Boolean(child.value);\n    case 'JSXElement':\n      return !(0, _isHiddenFromScreenReader2.default)((0, _jsxAstUtils.elementType)(child.openingElement), child.openingElement.attributes);\n    case 'JSXExpressionContainer':\n      if (child.expression.type === 'Identifier') {\n        return child.expression.name !== 'undefined';\n      }\n      return true;\n    default:\n      return false;\n  }\n};\n\nmodule.exports = {\n  determineChildType: determineChildType,\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var typeCheck = headings.concat(context.options[0]);\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        // Only check 'h*' elements and custom types.\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var isAccessible = node.parent.children.some(determineChildType) || (0, _jsxAstUtils.hasAnyProp)(node.attributes, ['dangerouslySetInnerHTML', 'children']);\n\n        if (isAccessible) {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/href-no-hash.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce links may not point to just #.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Links must not point to \"#\". ' + 'Use a more descriptive href or use a button instead.';\n\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  specialLink: _schemas.arraySchema\n});\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['a'].concat(componentOptions);\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        // Only check 'a' elements and custom types.\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var propOptions = options.specialLink || [];\n        var propsToValidate = ['href'].concat(propOptions);\n        var values = propsToValidate.map(function (prop) {\n          return (0, _jsxAstUtils.getProp)(node.attributes, prop);\n        }).map(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)(prop);\n        });\n\n        values.forEach(function (value) {\n          if (value === '#') {\n            context.report({\n              node: node,\n              message: errorMessage\n            });\n          }\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/html-has-lang.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce html element has lang prop.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = '<html> elements must have the lang prop.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var type = (0, _jsxAstUtils.elementType)(node);\n\n        if (type && type !== 'html') {\n          return;\n        }\n\n        var lang = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'lang'));\n\n        if (lang) {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/iframe-has-title.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce iframe elements have a title attribute.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = '<iframe> elements must have a unique title property.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var type = (0, _jsxAstUtils.elementType)(node);\n\n        if (type && type !== 'iframe') {\n          return;\n        }\n\n        var title = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'title'));\n\n        if (title && typeof title === 'string') {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/img-has-alt.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce img tag uses alt attribute.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)({ components: _schemas.arraySchema });\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['img'].concat(componentOptions);\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        // Only check 'img' elements and custom types.\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var roleProp = (0, _jsxAstUtils.getProp)(node.attributes, 'role');\n        var roleValue = (0, _jsxAstUtils.getPropValue)(roleProp);\n        var isPresentation = roleProp && typeof roleValue === 'string' && roleValue.toLowerCase() === 'presentation';\n\n        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n\n        // Missing alt prop error.\n        if (altProp === undefined) {\n          if (isPresentation) {\n            context.report({\n              node: node,\n              message: 'Prefer alt=\"\" over role=\"presentation\". First rule of aria is to not use aria if it can be achieved via native HTML.'\n            });\n            return;\n          }\n          context.report({\n            node: node,\n            message: nodeType + ' elements must have an alt prop, either with meaningful text, or an empty string for decorative images.'\n          });\n          return;\n        }\n\n        // Check if alt prop is undefined.\n        var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n        var isNullValued = altProp.value === null; // <img alt />\n\n        if (altValue && !isNullValued || altValue === '') {\n          return;\n        }\n\n        // Undefined alt prop error.\n        context.report({\n          node: node,\n          message: 'Invalid alt value for ' + nodeType + '. Use alt=\"\" for presentational images.'\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/img-redundant-alt.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar REDUNDANT_WORDS = ['image', 'photo', 'picture']; /**\n                                                      * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n                                                      * @author Ethan Cohen\n                                                      */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Redundant alt attribute. Screen-readers already announce ' + '`img` tags as an image. You don\\'t need to use the words `image`, ' + '`photo,` or `picture` (or any specified custom words) in the alt prop.';\n\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  words: _schemas.arraySchema\n});\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['img'].concat(componentOptions);\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        // Only check 'label' elements and custom types.\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n        // Return if alt prop is not present.\n        if (altProp === undefined) {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);\n        var isVisible = (0, _isHiddenFromScreenReader2.default)(nodeType, node.attributes) === false;\n\n        var _options$words = options.words,\n            words = _options$words === undefined ? [] : _options$words;\n\n        var redundantWords = REDUNDANT_WORDS.concat(words);\n\n        if (typeof value === 'string' && isVisible) {\n          var hasRedundancy = redundantWords.some(function (word) {\n            return Boolean(value.match(new RegExp('(?!{)\\\\b' + word + '\\\\b(?!})', 'i')));\n          });\n\n          if (hasRedundancy === true) {\n            context.report({\n              node: node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/label-has-for.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce label tags have htmlFor attribute.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Form controls using a label to identify them must be ' + 'programmatically associated with the control using htmlFor';\n\nvar schema = (0, _schemas.generateObjSchema)({ components: _schemas.arraySchema });\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['label'].concat(componentOptions);\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        // Only check 'label' elements and custom types.\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var htmlForAttr = (0, _jsxAstUtils.getProp)(node.attributes, 'htmlFor');\n        var htmlForValue = (0, _jsxAstUtils.getPropValue)(htmlForAttr);\n        var isInvalid = htmlForAttr === false || !htmlForValue;\n\n        if (isInvalid) {\n          context.report({\n            node: node,\n            message: errorMessage\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/lang.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _ISO = require('../util/attributes/ISO.json');\n\nvar _ISO2 = _interopRequireDefault(_ISO);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar errorMessage = 'lang attribute must have a valid value.'; /**\n                                                               * @fileoverview Enforce lang attribute has a valid value.\n                                                               * @author Ethan Cohen\n                                                               */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(node) {\n        var name = (0, _jsxAstUtils.propName)(node);\n        if (name && name.toUpperCase() !== 'LANG') {\n          return;\n        }\n\n        var parent = node.parent;\n\n        var type = (0, _jsxAstUtils.elementType)(parent);\n        if (type && type !== 'html') {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(node);\n\n        // Don't check identifiers\n        if (value === null) {\n          return;\n        } else if (value === undefined) {\n          context.report({\n            node: node,\n            message: errorMessage\n          });\n\n          return;\n        }\n\n        var hyphen = value.indexOf('-');\n        var lang = hyphen > -1 ? value.substring(0, hyphen) : value;\n        var country = hyphen > -1 ? value.substring(3) : undefined;\n\n        if (_ISO2.default.languages.indexOf(lang) > -1 && (country === undefined || _ISO2.default.countries.indexOf(country) > -1)) {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/mouse-events-have-key-events.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce onmouseover/onmouseout are\n *  accompanied by onfocus/onblur.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar mouseOverErrorMessage = 'onMouseOver must be accompanied by onFocus for accessibility.';\nvar mouseOutErrorMessage = 'onMouseOut must be accompanied by onBlur for accessibility.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n\n        // Check onmouseover / onfocus pairing.\n        var onMouseOver = (0, _jsxAstUtils.getProp)(attributes, 'onMouseOver');\n        var onMouseOverValue = (0, _jsxAstUtils.getPropValue)(onMouseOver);\n\n        if (onMouseOver && (onMouseOverValue !== null || onMouseOverValue !== undefined)) {\n          var hasOnFocus = (0, _jsxAstUtils.getProp)(attributes, 'onFocus');\n          var onFocusValue = (0, _jsxAstUtils.getPropValue)(hasOnFocus);\n\n          if (hasOnFocus === false || onFocusValue === null || onFocusValue === undefined) {\n            context.report({\n              node: node,\n              message: mouseOverErrorMessage\n            });\n          }\n        }\n\n        // Checkout onmouseout / onblur pairing\n        var onMouseOut = (0, _jsxAstUtils.getProp)(attributes, 'onMouseOut');\n        var onMouseOutValue = (0, _jsxAstUtils.getPropValue)(onMouseOut);\n        if (onMouseOut && (onMouseOutValue !== null || onMouseOutValue !== undefined)) {\n          var hasOnBlur = (0, _jsxAstUtils.getProp)(attributes, 'onBlur');\n          var onBlurValue = (0, _jsxAstUtils.getPropValue)(hasOnBlur);\n\n          if (hasOnBlur === false || onBlurValue === null || onBlurValue === undefined) {\n            context.report({\n              node: node,\n              message: mouseOutErrorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/no-access-key.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce no accesskey attribute on element.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'No access key attribute allowed. Inconsistencies ' + 'between keyboard shortcuts and keyboard comments used by screenreader ' + 'and keyboard only users create a11y complications.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var accessKey = (0, _jsxAstUtils.getProp)(node.attributes, 'accesskey');\n        var accessKeyValue = (0, _jsxAstUtils.getPropValue)(accessKey);\n\n        if (accessKey && accessKeyValue) {\n          context.report({\n            node: node,\n            message: errorMessage\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/no-autofocus.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce autoFocus prop is not used.\n * @author Ethan Cohen <@evcohen>\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'The autoFocus prop should not be used, as it can reduce usability and accessibility for users.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        // Don't normalize, since React only recognizes autoFocus on low-level DOM elements.\n        if ((0, _jsxAstUtils.propName)(attribute) === 'autoFocus') {\n          context.report({\n            node: attribute,\n            message: errorMessage\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/no-distracting-elements.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce distracting elements are not used.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(element) {\n  return 'Do not use <' + element + '> elements as they can create visual accessibility issues and are deprecated.';\n};\n\nvar DEFAULT_ELEMENTS = ['marquee', 'blink'];\n\nvar schema = (0, _schemas.generateObjSchema)({\n  elements: (0, _schemas.enumArraySchema)(DEFAULT_ELEMENTS)\n});\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var elementOptions = options.elements || DEFAULT_ELEMENTS;\n        var type = (0, _jsxAstUtils.elementType)(node);\n        var distractingElement = elementOptions.find(function (element) {\n          return type === element;\n        });\n\n        if (distractingElement) {\n          context.report({\n            node: node,\n            message: errorMessage(distractingElement)\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/no-onchange.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce usage of onBlur over onChange for accessibility.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'onBlur must be used instead of onchange, ' + 'unless absolutely necessary and it causes no negative consequences ' + 'for keyboard only or screen reader users.';\n\nvar applicableTypes = ['select', 'option'];\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var nodeType = (0, _jsxAstUtils.elementType)(node);\n\n        if (applicableTypes.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var onChange = (0, _jsxAstUtils.getProp)(node.attributes, 'onChange');\n        var hasOnBlur = (0, _jsxAstUtils.getProp)(node.attributes, 'onBlur') !== undefined;\n\n        if (onChange && !hasOnBlur) {\n          context.report({\n            node: node,\n            message: errorMessage\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/no-redundant-roles.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _getImplicitRole = require('../util/getImplicitRole');\n\nvar _getImplicitRole2 = _interopRequireDefault(_getImplicitRole);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar errorMessage = function errorMessage(element, implicitRole) {\n  return 'The element ' + element + ' has an implicit role of ' + implicitRole + '. Defining this explicitly is redundant and should be avoided.';\n}; /**\n    * @fileoverview Enforce explicit role property is not the\n    * same as implicit/default role property on element.\n    * @author Ethan Cohen <@evcohen>\n    */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var type = (0, _jsxAstUtils.elementType)(node);\n        var implicitRole = (0, _getImplicitRole2.default)(type, node.attributes);\n\n        if (implicitRole === '') {\n          return;\n        }\n\n        var role = (0, _jsxAstUtils.getProp)(node.attributes, 'role');\n        var roleValue = (0, _jsxAstUtils.getLiteralPropValue)(role);\n\n        if (typeof roleValue === 'string' && roleValue.toUpperCase() === implicitRole.toUpperCase()) {\n          context.report({\n            node: node,\n            message: errorMessage(type, implicitRole.toLowerCase())\n          });\n        }\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/getImplicitRole.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRole;\n\nvar _implicitRoles = require('./implicitRoles');\n\nvar _implicitRoles2 = _interopRequireDefault(_implicitRoles);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns an element's implicit role given its attributes and type.\n * Some elements only have an implicit role when certain props are defined.\n *\n * @param type - The node's tagName.\n * @param attributes - The collection of attributes on the node.\n * @returns {String} - String representing the node's implicit role or '' if it doesn't exist.\n */\nfunction getImplicitRole(type, attributes) {\n  var normalizedType = type.toUpperCase();\n\n  if (_implicitRoles2.default[normalizedType]) {\n    return _implicitRoles2.default[normalizedType](attributes);\n  }\n\n  return '';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _a = require('./a');\n\nvar _a2 = _interopRequireDefault(_a);\n\nvar _area = require('./area');\n\nvar _area2 = _interopRequireDefault(_area);\n\nvar _article = require('./article');\n\nvar _article2 = _interopRequireDefault(_article);\n\nvar _aside = require('./aside');\n\nvar _aside2 = _interopRequireDefault(_aside);\n\nvar _body = require('./body');\n\nvar _body2 = _interopRequireDefault(_body);\n\nvar _button = require('./button');\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _datalist = require('./datalist');\n\nvar _datalist2 = _interopRequireDefault(_datalist);\n\nvar _details = require('./details');\n\nvar _details2 = _interopRequireDefault(_details);\n\nvar _dialog = require('./dialog');\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _dl = require('./dl');\n\nvar _dl2 = _interopRequireDefault(_dl);\n\nvar _form = require('./form');\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _h = require('./h1');\n\nvar _h2 = _interopRequireDefault(_h);\n\nvar _h3 = require('./h2');\n\nvar _h4 = _interopRequireDefault(_h3);\n\nvar _h5 = require('./h3');\n\nvar _h6 = _interopRequireDefault(_h5);\n\nvar _h7 = require('./h4');\n\nvar _h8 = _interopRequireDefault(_h7);\n\nvar _h9 = require('./h5');\n\nvar _h10 = _interopRequireDefault(_h9);\n\nvar _h11 = require('./h6');\n\nvar _h12 = _interopRequireDefault(_h11);\n\nvar _hr = require('./hr');\n\nvar _hr2 = _interopRequireDefault(_hr);\n\nvar _img = require('./img');\n\nvar _img2 = _interopRequireDefault(_img);\n\nvar _input = require('./input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _li = require('./li');\n\nvar _li2 = _interopRequireDefault(_li);\n\nvar _link = require('./link');\n\nvar _link2 = _interopRequireDefault(_link);\n\nvar _menu = require('./menu');\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _menuitem = require('./menuitem');\n\nvar _menuitem2 = _interopRequireDefault(_menuitem);\n\nvar _meter = require('./meter');\n\nvar _meter2 = _interopRequireDefault(_meter);\n\nvar _nav = require('./nav');\n\nvar _nav2 = _interopRequireDefault(_nav);\n\nvar _ol = require('./ol');\n\nvar _ol2 = _interopRequireDefault(_ol);\n\nvar _option = require('./option');\n\nvar _option2 = _interopRequireDefault(_option);\n\nvar _output = require('./output');\n\nvar _output2 = _interopRequireDefault(_output);\n\nvar _progress = require('./progress');\n\nvar _progress2 = _interopRequireDefault(_progress);\n\nvar _section = require('./section');\n\nvar _section2 = _interopRequireDefault(_section);\n\nvar _select = require('./select');\n\nvar _select2 = _interopRequireDefault(_select);\n\nvar _tbody = require('./tbody');\n\nvar _tbody2 = _interopRequireDefault(_tbody);\n\nvar _textarea = require('./textarea');\n\nvar _textarea2 = _interopRequireDefault(_textarea);\n\nvar _tfoot = require('./tfoot');\n\nvar _tfoot2 = _interopRequireDefault(_tfoot);\n\nvar _thead = require('./thead');\n\nvar _thead2 = _interopRequireDefault(_thead);\n\nvar _ul = require('./ul');\n\nvar _ul2 = _interopRequireDefault(_ul);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  A: _a2.default,\n  AREA: _area2.default,\n  ARTICLE: _article2.default,\n  ASIDE: _aside2.default,\n  BODY: _body2.default,\n  BUTTON: _button2.default,\n  DATALIST: _datalist2.default,\n  DETAILS: _details2.default,\n  DIALOG: _dialog2.default,\n  DL: _dl2.default,\n  FORM: _form2.default,\n  H1: _h2.default,\n  H2: _h4.default,\n  H3: _h6.default,\n  H4: _h8.default,\n  H5: _h10.default,\n  H6: _h12.default,\n  HR: _hr2.default,\n  IMG: _img2.default,\n  INPUT: _input2.default,\n  LI: _li2.default,\n  LINK: _link2.default,\n  MENU: _menu2.default,\n  MENUITEM: _menuitem2.default,\n  METER: _meter2.default,\n  NAV: _nav2.default,\n  OL: _ol2.default,\n  OPTION: _option2.default,\n  OUTPUT: _output2.default,\n  PROGRESS: _progress2.default,\n  SECTION: _section2.default,\n  SELECT: _select2.default,\n  TBODY: _tbody2.default,\n  TEXTAREA: _textarea2.default,\n  TFOOT: _tfoot2.default,\n  THEAD: _thead2.default,\n  UL: _ul2.default\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/a.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForAnchor;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for an anchor tag.\n */\nfunction getImplicitRoleForAnchor(attributes) {\n  if ((0, _jsxAstUtils.getProp)(attributes, 'href')) {\n    return 'link';\n  }\n\n  return '';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/area.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForArea;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for an area tag.\n */\nfunction getImplicitRoleForArea(attributes) {\n  if ((0, _jsxAstUtils.getProp)(attributes, 'href')) {\n    return 'link';\n  }\n\n  return '';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/article.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForArticle;\n/**\n * Returns the implicit role for an article tag.\n */\nfunction getImplicitRoleForArticle() {\n  return 'article';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/aside.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForAside;\n/**\n * Returns the implicit role for an aside tag.\n */\nfunction getImplicitRoleForAside() {\n  return 'complementary';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/body.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForBody;\n/**\n * Returns the implicit role for a body tag.\n */\nfunction getImplicitRoleForBody() {\n  return 'document';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/button.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForButton;\n/**\n * Returns the implicit role for a button tag.\n */\nfunction getImplicitRoleForButton() {\n  return 'button';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/datalist.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForDatalist;\n/**\n * Returns the implicit role for a datalist tag.\n */\nfunction getImplicitRoleForDatalist() {\n  return 'listbox';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/details.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForDetails;\n/**\n * Returns the implicit role for a details tag.\n */\nfunction getImplicitRoleForDetails() {\n  return 'group';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/dialog.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForDialog;\n/**\n * Returns the implicit role for a dialog tag.\n */\nfunction getImplicitRoleForDialog() {\n  return 'dialog';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/dl.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForDl;\n/**\n * Returns the implicit role for a dl tag.\n */\nfunction getImplicitRoleForDl() {\n  return 'list';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/form.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForForm;\n/**\n * Returns the implicit role for a form tag.\n */\nfunction getImplicitRoleForForm() {\n  return 'form';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/h1.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForH1;\n/**\n * Returns the implicit role for an h1 tag.\n */\nfunction getImplicitRoleForH1() {\n  return 'heading';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/h2.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForH2;\n/**\n * Returns the implicit role for an h2 tag.\n */\nfunction getImplicitRoleForH2() {\n  return 'heading';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/h3.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForH3;\n/**\n * Returns the implicit role for an h3 tag.\n */\nfunction getImplicitRoleForH3() {\n  return 'heading';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/h4.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForH4;\n/**\n * Returns the implicit role for an h4 tag.\n */\nfunction getImplicitRoleForH4() {\n  return 'heading';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/h5.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForH5;\n/**\n * Returns the implicit role for an h5 tag.\n */\nfunction getImplicitRoleForH5() {\n  return 'heading';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/h6.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForH6;\n/**\n * Returns the implicit role for an h6tag.\n */\nfunction getImplicitRoleForH6() {\n  return 'heading';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/hr.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForHr;\n/**\n * Returns the implicit role for an hr tag.\n */\nfunction getImplicitRoleForHr() {\n  return 'separator';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/img.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForImg;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for an img tag.\n */\nfunction getImplicitRoleForImg(attributes) {\n  var alt = (0, _jsxAstUtils.getProp)(attributes, 'alt');\n\n  if (alt && (0, _jsxAstUtils.getLiteralPropValue)(alt) === '') {\n    return 'presentation';\n  }\n\n  return 'img';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/input.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForInput;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for an input tag.\n */\nfunction getImplicitRoleForInput(attributes) {\n  var type = (0, _jsxAstUtils.getProp)(attributes, 'type');\n\n  if (type) {\n    var value = (0, _jsxAstUtils.getLiteralPropValue)(type) || '';\n\n    switch (value.toUpperCase()) {\n      case 'BUTTON':\n      case 'IMAGE':\n      case 'RESET':\n      case 'SUBMIT':\n        return 'button';\n      case 'CHECKBOX':\n        return 'checkbox';\n      case 'RADIO':\n        return 'radio';\n      case 'RANGE':\n        return 'slider';\n      case 'EMAIL':\n      case 'PASSWORD':\n      case 'SEARCH': // with [list] selector it's combobox\n      case 'TEL': // with [list] selector it's combobox\n      case 'URL': // with [list] selector it's combobox\n      default:\n        return 'textbox';\n    }\n  }\n\n  return 'textbox';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/li.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForLi;\n/**\n * Returns the implicit role for an li tag.\n */\nfunction getImplicitRoleForLi() {\n  return 'listitem';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/link.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForLink;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for a link tag.\n */\nfunction getImplicitRoleForLink(attributes) {\n  if ((0, _jsxAstUtils.getProp)(attributes, 'href')) {\n    return 'link';\n  }\n\n  return '';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/menu.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForMenu;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for a menu tag.\n */\nfunction getImplicitRoleForMenu(attributes) {\n  var type = (0, _jsxAstUtils.getProp)(attributes, 'type');\n\n  if (type) {\n    var value = (0, _jsxAstUtils.getLiteralPropValue)(type);\n\n    return value && value.toUpperCase() === 'TOOLBAR' ? 'toolbar' : '';\n  }\n\n  return '';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/menuitem.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForMenuitem;\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\n/**\n * Returns the implicit role for a menuitem tag.\n */\nfunction getImplicitRoleForMenuitem(attributes) {\n  var type = (0, _jsxAstUtils.getProp)(attributes, 'type');\n\n  if (type) {\n    var value = (0, _jsxAstUtils.getLiteralPropValue)(type) || '';\n\n    switch (value.toUpperCase()) {\n      case 'COMMAND':\n        return 'menuitem';\n      case 'CHECKBOX':\n        return 'menuitemcheckbox';\n      case 'RADIO':\n        return 'menuitemradio';\n      default:\n        return '';\n    }\n  }\n\n  return '';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/meter.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForMeter;\n/**\n * Returns the implicit role for a meter tag.\n */\nfunction getImplicitRoleForMeter() {\n  return 'progressbar';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/nav.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForNav;\n/**\n * Returns the implicit role for a nav tag.\n */\nfunction getImplicitRoleForNav() {\n  return 'navigation';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/ol.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForOl;\n/**\n * Returns the implicit role for an ol tag.\n */\nfunction getImplicitRoleForOl() {\n  return 'list';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/option.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForOption;\n/**\n * Returns the implicit role for an option tag.\n */\nfunction getImplicitRoleForOption() {\n  return 'option';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/output.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForOutput;\n/**\n * Returns the implicit role for an output tag.\n */\nfunction getImplicitRoleForOutput() {\n  return 'status';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/progress.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForProgress;\n/**\n * Returns the implicit role for a progress tag.\n */\nfunction getImplicitRoleForProgress() {\n  return 'progressbar';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/section.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForSection;\n/**\n * Returns the implicit role for a section tag.\n */\nfunction getImplicitRoleForSection() {\n  return 'region';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/select.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForSelect;\n/**\n * Returns the implicit role for a select tag.\n */\nfunction getImplicitRoleForSelect() {\n  return 'listbox';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/tbody.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForTbody;\n/**\n * Returns the implicit role for a tbody tag.\n */\nfunction getImplicitRoleForTbody() {\n  return 'rowgroup';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/textarea.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForTextarea;\n/**\n * Returns the implicit role for a textarea tag.\n */\nfunction getImplicitRoleForTextarea() {\n  return 'textbox';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/tfoot.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForTfoot;\n/**\n * Returns the implicit role for a tfoot tag.\n */\nfunction getImplicitRoleForTfoot() {\n  return 'rowgroup';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/thead.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForThead;\n/**\n * Returns the implicit role for a thead tag.\n */\nfunction getImplicitRoleForThead() {\n  return 'rowgroup';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/implicitRoles/ul.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getImplicitRoleForUl;\n/**\n * Returns the implicit role for a ul tag.\n */\nfunction getImplicitRoleForUl() {\n  return 'list';\n}","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/no-static-element-interactions.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nvar _isInteractiveElement = require('../util/isInteractiveElement');\n\nvar _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @fileoverview Enforce non-interactive elements have no interactive handlers.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Visible, non-interactive elements should not have mouse or keyboard event listeners';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var props = node.attributes;\n        var type = (0, _jsxAstUtils.elementType)(node);\n\n        var interactiveProps = ['onclick', 'ondblclick', 'onkeydown', 'onkeyup', 'onkeypress'];\n\n        if ((0, _isHiddenFromScreenReader2.default)(type, props)) {\n          return;\n        } else if ((0, _isInteractiveElement2.default)(type, props)) {\n          return;\n        } else if ((0, _jsxAstUtils.hasAnyProp)(props, interactiveProps) === false) {\n          return;\n        }\n\n        // Visible, non-interactive elements should not have an interactive handler.\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/onclick-has-focus.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nvar _isInteractiveElement = require('../util/isInteractiveElement');\n\nvar _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);\n\nvar _isInteractiveRole = require('../util/isInteractiveRole');\n\nvar _isInteractiveRole2 = _interopRequireDefault(_isInteractiveRole);\n\nvar _getTabIndex = require('../util/getTabIndex');\n\nvar _getTabIndex2 = _interopRequireDefault(_getTabIndex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n/**\n * @fileoverview Enforce that elements with onClick handlers must be focusable.\n * @author Ethan Cohen\n */\n\nvar errorMessage = 'An non-interactive element with an onClick handler and an ' + 'interactive role must be focusable. Either set the tabIndex property to ' + 'a valid value (usually 0) or use an element type which is inherently ' + 'focusable such as `button`.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n\n        if ((0, _jsxAstUtils.getProp)(attributes, 'onClick') === undefined) {\n          return;\n        }\n\n        var type = (0, _jsxAstUtils.elementType)(node);\n\n        if ((0, _isHiddenFromScreenReader2.default)(type, attributes)) {\n          return;\n        } else if ((0, _isInteractiveElement2.default)(type, attributes)) {\n          return;\n        } else if (!(0, _isInteractiveRole2.default)(type, attributes)) {\n          // A non-interactive element or an element without an interactive\n          // role might have a click hanlder attached to it in order to catch\n          // bubbled click events. In this case, the author should apply a role\n          // of presentation to the element to indicate that it is not meant to\n          // be interactive.\n          return;\n        } else if ((0, _getTabIndex2.default)((0, _jsxAstUtils.getProp)(attributes, 'tabIndex')) !== undefined) {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/util/isInteractiveRole.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar VALID_ROLES = [].concat(_toConsumableArray(_ariaQuery.roles.keys())).filter(function (role) {\n  return _ariaQuery.roles.get(role).interactive === true;\n});\n/**\n * Returns boolean indicating whether the given element has a role\n * that is associated with an interactive component. Used when an element\n * has a dynamic handler on it and we need to discern whether or not\n * its intention is to be interacted with in the DOM.\n *\n * isInteractiveRole is a Logical Disjunction:\n * https://en.wikipedia.org/wiki/Logical_disjunction\n * The JSX element does not have a tagName or it has a tagName and a role\n * attribute with a value in the set of non-interactive roles.\n */\nvar isInteractiveRole = function isInteractiveRole(tagName, attributes) {\n  // Do not test higher level JSX components, as we do not know what\n  // low-level DOM element this maps to.\n  if ([].concat(_toConsumableArray(_ariaQuery.dom.keys())).indexOf(tagName) === -1) {\n    return true;\n  }\n\n  var value = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(attributes, 'role'));\n\n  // If value is undefined, then the role attribute will be dropped in the DOM.\n  // If value is null, then getLiteralAttributeValue is telling us that the\n  // value isn't in the form of a literal\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  var normalizedValues = String(value).toLowerCase().split(' ');\n  var isInteractive = normalizedValues.every(function (val) {\n    return VALID_ROLES.indexOf(val) > -1;\n  });\n\n  return isInteractive;\n};\n\nexports.default = isInteractiveRole;","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/onclick-has-role.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');\n\nvar _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);\n\nvar _isInteractiveElement = require('../util/isInteractiveElement');\n\nvar _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n/**\n * @fileoverview Enforce non-interactive elements with\n *  click handlers use role attribute.\n * @author Ethan Cohen\n */\n\nvar errorMessage = 'Visible, non-interactive elements with click handlers must ' + 'have role attribute.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n        if ((0, _jsxAstUtils.getProp)(attributes, 'onclick') === undefined) {\n          return;\n        }\n\n        var type = (0, _jsxAstUtils.elementType)(node);\n\n        if ((0, _isHiddenFromScreenReader2.default)(type, attributes)) {\n          return;\n        } else if ((0, _isInteractiveElement2.default)(type, attributes)) {\n          return;\n        } else if ((0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(attributes, 'role'))) {\n          return;\n        }\n\n        // Visible, non-interactive elements require role attribute.\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/role-has-required-aria-props.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce that elements with ARIA roles must\n                                                                                                                                                                                                     *  have all required attributes for that role.\n                                                                                                                                                                                                     * @author Ethan Cohen\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(role, requiredProps) {\n  return 'Elements with the ARIA role \"' + role + '\" must have the following ' + ('attributes defined: ' + String(requiredProps).toLowerCase());\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name ? name.toUpperCase() : '';\n\n        if (normalizedName !== 'ROLE') {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute);\n\n        // If value is undefined, then the role attribute will be dropped in the DOM.\n        // If value is null, then getLiteralAttributeValue is telling us\n        // that the value isn't in the form of a literal.\n        if (value === undefined || value === null) {\n          return;\n        }\n\n        var normalizedValues = String(value).toLowerCase().split(' ');\n        var validRoles = normalizedValues.filter(function (val) {\n          return [].concat(_toConsumableArray(_ariaQuery.roles.keys())).indexOf(val) > -1;\n        });\n\n        validRoles.forEach(function (role) {\n          var _roles$get = _ariaQuery.roles.get(role),\n              requiredProps = _roles$get.requiredProps;\n\n          if (requiredProps.length > 0) {\n            var hasRequiredProps = requiredProps.every(function (prop) {\n              return (0, _jsxAstUtils.getProp)(attribute.parent.attributes, prop);\n            });\n\n            if (hasRequiredProps === false) {\n              context.report({\n                node: attribute,\n                message: errorMessage(role.toLowerCase(), requiredProps)\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/role-supports-aria-props.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nvar _getImplicitRole = require('../util/getImplicitRole');\n\nvar _getImplicitRole2 = _interopRequireDefault(_getImplicitRole);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce that elements with explicit or implicit roles defined contain only\n                                                                                                                                                                                                     * `aria-*` properties supported by that `role`.\n                                                                                                                                                                                                     * @author Ethan Cohen\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(attr, role, tag, isImplicit) {\n  if (isImplicit) {\n    return 'The attribute ' + attr + ' is not supported by the role ' + role + '. This role is implicit on the element ' + tag + '.';\n  }\n\n  return 'The attribute ' + attr + ' is not supported by the role ' + role + '.';\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        // If role is not explicitly defined, then try and get its implicit role.\n        var type = (0, _jsxAstUtils.elementType)(node);\n        var role = (0, _jsxAstUtils.getProp)(node.attributes, 'role');\n        var roleValue = role ? (0, _jsxAstUtils.getLiteralPropValue)(role) : (0, _getImplicitRole2.default)(type, node.attributes);\n        var isImplicit = roleValue && role === undefined;\n\n        // If there is no explicit or implicit role, then assume that the element\n        // can handle the global set of aria-* properties.\n        // This actually isn't true - should fix in future release.\n        if (typeof roleValue !== 'string' || _ariaQuery.roles.get(roleValue.toLowerCase()) === undefined) {\n          return;\n        }\n\n        // Make sure it has no aria-* properties defined outside of its property set.\n        var propertySet = _ariaQuery.roles.get(roleValue.toLowerCase()).props;\n        var invalidAriaPropsForRole = [].concat(_toConsumableArray(_ariaQuery.aria.keys())).map(function (attribute) {\n          return attribute.toLowerCase();\n        }).filter(function (attribute) {\n          return propertySet.indexOf(attribute) === -1;\n        });\n\n        node.attributes.forEach(function (prop) {\n          if (prop.type === 'JSXSpreadAttribute') {\n            return;\n          }\n\n          var name = (0, _jsxAstUtils.propName)(prop);\n          var normalizedName = name ? name.toLowerCase() : '';\n\n          if (invalidAriaPropsForRole.indexOf(normalizedName) > -1) {\n            context.report({\n              node: node,\n              message: errorMessage(name, roleValue, type, isImplicit)\n            });\n          }\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/scope.js":"'use strict';\n\nvar _ariaQuery = require('aria-query');\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * @fileoverview Enforce scope prop is only used on <th> elements.\n                                                                                                                                                                                                     * @author Ethan Cohen\n                                                                                                                                                                                                     */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'The scope prop can only be used on <th> elements.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(node) {\n        var name = (0, _jsxAstUtils.propName)(node);\n        if (name && name.toUpperCase() !== 'SCOPE') {\n          return;\n        }\n\n        var parent = node.parent;\n\n        var tagName = (0, _jsxAstUtils.elementType)(parent);\n\n        // Do not test higher level JSX components, as we do not know what\n        // low-level DOM element this maps to.\n        if ([].concat(_toConsumableArray(_ariaQuery.dom.keys())).indexOf(tagName) === -1) {\n          return;\n        } else if (tagName && tagName.toUpperCase() === 'TH') {\n          return;\n        }\n\n        context.report({\n          node: node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/lib/rules/tabindex-no-positive.js":"'use strict';\n\nvar _jsxAstUtils = require('jsx-ast-utils');\n\nvar _schemas = require('../util/schemas');\n\n/**\n * @fileoverview Enforce tabIndex value is not greater than zero.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Avoid positive integer values for tabIndex.';\n\nvar schema = (0, _schemas.generateObjSchema)();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema]\n  },\n\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name ? name.toUpperCase() : '';\n\n        // Check if tabIndex is the attribute\n        if (normalizedName !== 'TABINDEX') {\n          return;\n        }\n\n        // Only check literals because we can't infer values from certain expressions.\n        var value = Number((0, _jsxAstUtils.getLiteralPropValue)(attribute));\n\n        if (isNaN(value) || value <= 0) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/flow/eslint.js":"type ESLintReport = {\n  node: any,\n  message: string,\n};\n\ntype ESLintContext = {\n  report: (ESLintReport) => void,\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/scripts/addRuleToIndex.js":"export const parser = 'flow';\n\nexport default function transformer(file, api, options) {\n  const j = api.jscodeshift;\n  const s = j(file.source);\n  const {\n    ruleName,\n    rulePath,\n  } = options || {};\n\n  const nameSort = (a, b) => {\n    const aName = (a.key.type === 'Literal') ? a.key.value : a.key.name;\n    const bName = (b.key.type === 'Literal') ? b.key.value : b.key.name;\n    if (aName < bName) {\n      return -1;\n    }\n    if (bName < aName) {\n      return 1;\n    }\n    return 0;\n  };\n\n  let changesMade = 0;\n\n  const rulePathInSrc = './' + rulePath.match(/src\\/(.*)\\.js/)[1];\n\n  changesMade += s.find(j.Identifier, {\n    name: 'rules'\n  }).forEach((path, index) => {\n    // Add rule path.\n    if (index === 0) {\n      path.parentPath.value.value.properties.unshift(\n        j.property(\n          'init',\n          j.literal(ruleName),\n          j.callExpression(\n            j.identifier('require'),\n            [\n              j.literal(rulePathInSrc),\n            ]\n          ),\n        )\n      );\n      path.parentPath.value.value.properties.sort(nameSort);\n    }\n    // Set default reporting to error.\n    if (index === 1) {\n      path.parentPath.value.value.properties.unshift(\n        j.property(\n          'init',\n          j.literal('jsx-a11y/' + ruleName),\n          j.literal('error'),\n        )\n      );\n      path.parentPath.value.value.properties.sort(nameSort);\n    }\n  }).length;\n\n\n  if (changesMade === 0) {\n    return null;\n  }\n\n  return s.toSource({\n    quote: 'single',\n    trailingComma: true,\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/scripts/create-rule.js":"#!/usr/bin/env node --harmony\nconst path = require('path');\nconst fs = require('fs');\nconst argv = require('minimist')(process.argv.slice(2)); // eslint-disable-line import/no-extraneous-dependencies\nconst ruleBoilerplateGenerator = require('./boilerplate/rule');\nconst testBoilerplateGenerator = require('./boilerplate/test');\nconst docBoilerplateGenerator = require('./boilerplate/doc');\nconst exec = require('child_process').exec;\n\nconst ruleName = argv._[0];\nconst author = argv.author || '$AUTHOR';\nconst description = argv.description || '$DESCRIPTION';\n\nconst rulePath = path.resolve(`src/rules/${ruleName}.js`);\nconst testPath = path.resolve(`__tests__/src/rules/${ruleName}-test.js`);\nconst docsPath = path.resolve(`docs/rules/${ruleName}.md`);\n\nconst jscodeshiftJSON = require('jscodeshift/package.json');\nconst jscodeshiftMain = jscodeshiftJSON.main;\nconst jscodeshiftPath = require.resolve('jscodeshift');\nconst jscodeshiftRoot = jscodeshiftPath.slice(\n  0,\n  jscodeshiftPath.indexOf(jscodeshiftMain)\n);\n\n// Validate\nif (!ruleName) {\n  throw new Error('Rule name is required');\n} else if (fs.existsSync(rulePath)) {\n  throw new Error('Rule already exists!');\n}\n\n// Generate file boilerplate\nconst ruleBoilerplate = ruleBoilerplateGenerator(author, description);\nconst testBoilerplate = testBoilerplateGenerator(ruleName, author, description);\nconst docBoilerplate = docBoilerplateGenerator(ruleName);\n\n// Create new files\nfs.writeFileSync(rulePath, ruleBoilerplate);\nfs.writeFileSync(testPath, testBoilerplate);\nfs.writeFileSync(docsPath, docBoilerplate);\n\n// Add the rule to the index\nexec([\n  path.join(\n    jscodeshiftRoot,\n    jscodeshiftJSON.bin.jscodeshift\n  ),\n  './src/index.js',\n  '-t ./scripts/addRuleToIndex.js',\n  '--extensions js',\n  '--parser flow',\n  `--ruleName=${ruleName}`,\n  `--rulePath=${rulePath}`,\n  ].join(' '),\n  (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n  }\n);\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/scripts/boilerplate/rule.js":"const ruleBoilerplate = (author, description) => `/**\n * @fileoverview ${description}\n * @author ${author}\n * @flow\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nimport type { JSXOpeningElement } from 'ast-types-flow';\nimport { generateObjSchema } from '../util/schemas';\n\nconst errorMessage = '';\n\nconst schema = generateObjSchema();\n\nmodule.exports = {\n  meta: {\n    docs: {},\n    schema: [schema],\n  },\n\n  create: (context: ESLintContext) => ({\n    JSXOpeningElement: (node: JSXOpeningElement) => {\n      context.report({\n        node,\n        message: errorMessage,\n      });\n    },\n  }),\n};\n`;\n\nmodule.exports = ruleBoilerplate;\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/scripts/boilerplate/test.js":"const testBoilerplate = (name, author, description) => `/* eslint-env jest */\n/**\n * @fileoverview ${description}\n * @author ${author}\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/${name}';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: '',\n  type: 'JSXOpeningElement',\n};\n\nruleTester.run('${name}', rule, {\n  valid: [\n    { code: '<div />;' },\n  ].map(parserOptionsMapper),\n  invalid: [].map(parserOptionsMapper),\n});\n`;\n\nmodule.exports = testBoilerplate;\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsx-a11y/node_modules/eslint-plugin-jsx-a11y/scripts/boilerplate/doc.js":"const docBoilerplateGenerator = name => `# ${name}\n\nWrite a useful explanation here!\n\n#### References\n1.\n\n## Rule details\n\nThis rule takes no arguments.\n\n### Succeed\n\\`\\`\\`jsx\n<div />\n\\`\\`\\`\n\n### Fail\n\\`\\`\\`jsx\n\n\\`\\`\\`\n`;\n\nmodule.exports = docBoilerplateGenerator;\n"}